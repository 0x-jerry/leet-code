/*
 * @lc app=leetcode id=85 lang=typescript
 *
 * [85] Maximal Rectangle
 */

// @lc code=start
function maximalRectangle(matrix: string[][]): number {
  const lenX = matrix[0].length
  const lenY = matrix.length

  let maxArea = 0

  for (let y = 0; y < lenY; y++) {
    for (let x = 0; x < lenX; x++) {
      if (!isValid(x, y)) {
        continue
      }

      maxArea = Math.max(maxArea, calculateMaxArea(x, y))
    }
  }

  return maxArea

  function calculateMaxArea(x: number, y: number) {
    let area = 0

    let endX = lenX

    for (let xx = x + 1; xx < lenX; xx++) {
      if (!isValid(xx, y)) {
        endX = xx
        break
      }
    }

    let endY = lenY

    for (let yy = y + 1; yy < lenY; yy++) {
      if (!isValidRow(yy, x, endX)) {
        endY = yy
        break
      }
    }

    area = (endY - y) * (endX - x)

    for (let xx = endX - 1; xx > x; xx--) {
      for (let yy = endY; yy <= lenY; yy++) {
        if (yy === lenY || !isValidRow(yy, x, xx)) {
          area = Math.max(area, (yy - y) * (xx - x))
          break
        }
      }
    }

    return area

    function isValidRow(y: number, left: number, right: number) {
      for (let x = left; x < right; x++) {
        if (!isValid(x, y)) {
          return false
        }
      }

      return true
    }
  }

  function isValid(x: number, y: number) {
    return matrix[y]?.[x] === '1'
  }
}
// @lc code=end

describe('Maximal Rectangle', () => {
  it('matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]', () => {
    expect(
      maximalRectangle([
        ['1', '0', '1', '0', '0'],
        ['1', '0', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '0', '0', '1', '0'],
      ]),
    ).toBe(6)
  })

  it('matrix = [["0","0","1","0"],["1","1","1","1"],["1","1","1","1"],["1","1","1","0"],["1","1","0","0"],["1","1","1","1"],["1","1","1","0"]]', () => {
    expect(
      maximalRectangle([
        ['0', '0', '1', '0'],
        ['1', '1', '1', '1'],
        ['1', '1', '1', '1'],
        ['1', '1', '1', '0'],
        ['1', '1', '0', '0'],
        ['1', '1', '1', '1'],
        ['1', '1', '1', '0'],
      ]),
    ).toBe(12)
  })

  it('matrix = complex', () => {
    expect(
      maximalRectangle([
        ['0', '0', '1', '0'],
        ['0', '0', '1', '0'],
        ['0', '0', '1', '0'],
        ['0', '0', '1', '1'],
        ['0', '1', '1', '1'],
        ['0', '1', '1', '1'],
        ['1', '1', '1', '1'],
      ]),
    ).toBe(9)
  })

  it('matrix = [["0"]]', () => {
    expect(maximalRectangle([['0']])).toBe(0)
  })

  it('matrix = [["1"]]', () => {
    expect(maximalRectangle([['1']])).toBe(1)
  })

  it('matrix = time limited', () => {
    expect(
      maximalRectangle([
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1'],
      ]),
    ).toBe(500)
  })

  it('matrix = 21', () => {
    expect(
      maximalRectangle([
        ['1', '1', '1', '1', '1', '1', '1', '1'],
        ['1', '1', '1', '1', '1', '1', '1', '0'],
        ['1', '1', '1', '1', '1', '1', '1', '0'],
        ['1', '1', '1', '1', '1', '0', '0', '0'],
        ['0', '1', '1', '1', '1', '0', '0', '0'],
      ]),
    ).toBe(21)
  })
})
